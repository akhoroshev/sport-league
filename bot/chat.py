from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, \
    InlineKeyboardMarkup
import util
import pickle

registered_users = {}
user_states = {}
user_answers = {}


def load_user_data(file='users.txt'):
    global registered_users
    try:
        with open(file, 'rb') as f:
            registered_users = pickle.load(f)
    except Exception as e:
        registered_users = {}


def save_user_data(file='users.txt'):
    global registered_users
    with open(file, 'wb') as f:
        pickle.dump(registered_users, f)


def get_auth(user_id):
    if user_id not in registered_users:
        raise ValueError('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
    return registered_users[user_id]


def set_user_answer(user_id, field, result):
    if user_id in user_answers:
        user_answers[user_id][field] = result
    else:
        user_answers[user_id] = {field: result}


def get_user_answer(user_id, field):
    if user_id in user_answers:
        if field in user_answers[user_id]:
            return user_answers[user_id][field]
    raise ValueError('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..')


def get_user_state(user_id):
    if user_id in user_states:
        return user_states[user_id]
    else:
        return None


def set_user_state(user_id, state):
    user_states[user_id] = state


def check_registration(handler):
    def wrapper(bot, update, *args, **kwargs):
        if update.message.chat_id in registered_users:
            try:
                util.post('/register/check', registered_users[update.message.chat_id])
            except Exception as e:
                update.message.reply_text('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å!')
                return
            handler(bot, update, args, kwargs)
        else:
            update.message.reply_text('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è!')
            return

    return wrapper


def start(bot, update):
    bot.send_message(chat_id=update.message.chat_id,
                     text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!üèÜ\n"
                          "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–Ω—è–¥–æ–±—è—Ç—Å—è:\n"
                          "/register nickname password - —Ä–µ–≥–∏–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
                          "/login nickname password - –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
                          "/create_event - —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
                          "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å\n"
                          "/list_all_events - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è\n"
                          "/list_my_events - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫\n"
                          "/list_follows - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
                          "/create_follow - –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")


def login(bot, update, args):
    if len(args) != 2:
        bot.send_message(chat_id=update.message.chat_id, text='–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã!')
        return
    try:
        util.post('/register/check', {'username': args[0], 'password': args[1]})
        registered_users[update.message.chat_id] = {
            'username': args[0],
            'password': args[1]
        }
        save_user_data()
        msg = '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!'
    except Exception as e:
        msg = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å!'
    bot.send_message(chat_id=update.message.chat_id, text=msg)


def register(bot, update, args):
    if len(args) != 2:
        bot.send_message(chat_id=update.message.chat_id, text='–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã!')
        return
    try:
        util.post('/register', {'username': args[0], 'password': args[1]})
        registered_users[update.message.chat_id] = {
            'username': args[0],
            'password': args[1]
        }
        save_user_data()
        msg = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!'
    except Exception as e:
        msg = '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º/–ø–∞—Ä–æ–ª–µ–º!'
    bot.send_message(chat_id=update.message.chat_id, text=msg)


def chose_sport():
    kb = [[KeyboardButton(sport) for sport in util.sport_list()]]
    kb_markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    return kb_markup


def chose_time():
    kb = [[KeyboardButton(sport) for sport in util.time_list()]]
    kb_markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    return kb_markup


def chose_ranked():
    kb = [[KeyboardButton('–î–∞'), KeyboardButton('–ù–µ—Ç')]]
    kb_markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    return kb_markup


def chose_location():
    kb = [[KeyboardButton(sport) for sport in util.location_list()]]
    kb_markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    return kb_markup


@check_registration
def request_for_creating_event(bot, update, *args, **kwargs):
    bot.send_message(chat_id=update.message.chat_id,
                     text='–í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö ‚öΩÔ∏èüèÄüèì',
                     reply_markup=chose_sport())
    set_user_state(update.message.chat_id, 'event_sport')


@check_registration
def request_for_creating_follow(bot, update, *args, **kwargs):
    bot.send_message(chat_id=update.message.chat_id,
                     text='–í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö ‚öΩÔ∏èüèÄüèì',
                     reply_markup=chose_sport())
    set_user_state(update.message.chat_id, 'follow_sport')


@check_registration
def request_for_list_your_follow(bot, update, *args, **kwargs):
    generate_follow_buttons(bot, update, get_your_follow_list(update.message.chat_id))


@check_registration
def request_for_list_your_events(bot, update, *args, **kwargs):
    generate_event_buttons(bot, update.message.chat_id, get_your_event_list(update.message.chat_id))


@check_registration
def request_for_list_events(bot, update, *args, **kwargs):
    bot.send_message(chat_id=update.message.chat_id,
                     text='–í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö ‚öΩÔ∏èüèÄüèì',
                     reply_markup=chose_sport())
    set_user_state(update.message.chat_id, 'list_sport')


def cancel(bot, update):
    bot.send_message(chat_id=update.message.chat_id,
                     text='–û—Ç–º–µ–Ω–∞',
                     reply_markup=ReplyKeyboardRemove())
    set_user_state(update.message.chat_id, None)


def process_creating_event(bot, update):
    id = update.message.chat_id
    current_state = get_user_state(id)
    if current_state is None:
        return
    elif current_state is 'event_sport':
        try:
            set_user_answer(id, 'event_sport', util.parse_sport_id(update.message.text))
            update.message.reply_text('–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –∏–ª–∏ —É–∫–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM-DD-hhüïê', reply_markup=chose_time())
            set_user_state(id, 'event_date')
        except ValueError as e:
            update.message.reply_text(str(e))
        except Exception as e:
            pass
    elif current_state is 'event_date':
        try:
            set_user_answer(id, 'event_date', util.parse_time(update.message.text))
            update.message.reply_text('–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—éüó∫', reply_markup=chose_location())
            set_user_state(id, 'event_location')
        except ValueError as e:
            update.message.reply_text(str(e))
        except Exception as e:
            pass
    elif current_state is 'event_location':
        try:
            set_user_answer(id, 'event_location', util.parse_location_id(update.message.text))
            update.message.reply_text('–û—Å—Ç–∞–≤—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ —Å–æ–±—ã—Ç–∏–∏üìù', reply_markup=ReplyKeyboardRemove())
            set_user_state(id, 'event_description')
        except ValueError as e:
            update.message.reply_text(str(e))
        except Exception as e:
            pass
    elif current_state is 'event_description':
        set_user_answer(id, 'event_description', update.message.text)
        update.message.reply_text('–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ')
        set_user_state(id, 'event_amount_of_players')
    elif current_state is 'event_amount_of_players':
        try:
            amount = int(update.message.text)
            if amount < 1:
                raise ValueError('–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ < 1')
            set_user_answer(id, 'event_amount_of_players', amount)
            update.message.reply_text('–≠—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ?', reply_markup=chose_ranked())
            set_user_state(id, 'event_ranked')
        except ValueError:
            update.message.reply_text('–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—â–µ —Ä–∞–∑')
    elif current_state is 'event_ranked':
        try:
            set_user_answer(id, 'event_ranked', util.parse_ranked(update.message.text))
            update.message.reply_text('–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è...', reply_markup=ReplyKeyboardRemove())
            set_user_state(id, None)
        except ValueError as e:
            update.message.reply_text(str(e))
            return
        try:
            event_id, usernames = event_create(id)
            update.message.reply_text('–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ')
        except Exception as e:
            update.message.reply_text(str(e))
            return
        # TODO
        send_notifications(
            bot,
            [chat_id for chat_id in registered_users if registered_users[chat_id]['username'] in usernames],
            [event_id]
        )


def process_creating_follow(bot, update):
    id = update.message.chat_id
    current_state = get_user_state(id)
    if current_state is None:
        return
    elif current_state is 'follow_sport':
        try:
            set_user_answer(id, 'follow_sport', util.parse_sport_id(update.message.text))
            update.message.reply_text('–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—éüó∫', reply_markup=chose_location())
            set_user_state(id, 'follow_location')
        except ValueError as e:
            update.message.reply_text(str(e))
    elif current_state is 'follow_location':
        try:
            set_user_answer(id, 'follow_location', util.parse_location_id(update.message.text))
            update.message.reply_text('–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...', reply_markup=ReplyKeyboardRemove())
            set_user_state(id, None)
        except ValueError as e:
            update.message.reply_text(str(e))
        try:
            event_ids = follow_create(id)
            update.message.reply_text('–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã')
        except Exception as e:
            update.message.reply_text(str(e))
            return
        # TODO
        send_notifications(bot, [update.message.chat_id], event_ids)


def process_list_events(bot, update):
    id = update.message.chat_id
    current_state = get_user_state(id)
    if current_state is None:
        return
    elif current_state is 'list_sport':
        try:
            set_user_answer(id, 'list_sport', util.parse_sport_id(update.message.text))
            update.message.reply_text('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è...', reply_markup=ReplyKeyboardRemove())
            set_user_state(id, None)
        except ValueError as e:
            update.message.reply_text(str(e))
            return
        try:
            generate_event_buttons(bot, update.message.chat_id, get_event_list(id))
        except Exception as e:
            update.message.reply_text(str(e))


def input(bot, update):
    process_creating_event(bot, update)
    process_list_events(bot, update)
    process_creating_follow(bot, update)


def follow_create(id):
    data = util.post(
        '/follow/add',
        {
            'sport_id': get_user_answer(id, 'follow_sport'),
            'location': get_user_answer(id, 'follow_location')
        },
        get_auth(id)
    )
    return data['event_ids']


def event_create(id):
    data = util.post(
        '/event/create',
        {
            'sport_id': get_user_answer(id, 'event_sport'),
            'timestamp': get_user_answer(id, 'event_date'),
            'location': get_user_answer(id, 'event_location'),
            'description': get_user_answer(id, 'event_description'),
            'participants_number_max': get_user_answer(id, 'event_amount_of_players'),
            'status_rating': get_user_answer(id, 'event_ranked')
        },
        get_auth(id)
    )
    return data['event_id'], data['usernames']


def get_your_follow_list(id):
    follows_ids = util.post(
        '/follow/list',
        {},
        get_auth(id)
    )
    return get_follow_detail(follows_ids['follow_ids'], id)


def get_your_event_list(id):
    event_ids = util.post(
        '/event/user',
        {},
        get_auth(id)
    )
    return get_event_detail(event_ids['event_ids'], id)


def get_event_list(id):
    event_ids = util.post(
        '/event/list',
        {
            'sport_id': get_user_answer(id, 'list_sport')
        },
        get_auth(id)
    )
    return get_event_detail(event_ids['event_ids'], id)


def get_follow_detail(follows_id, tg_id):
    result = dict()
    for follow_id in follows_id:
        result[follow_id] = {}
        data = util.post(
            '/follow/get',
            {
                'follow_id': follow_id
            },
            get_auth(tg_id)
        )
        result[follow_id]['–í–∏–¥ —Å–ø–æ—Ä—Ç–∞'] = util.id_to_sport(str(data['follow_info']['sport_id']))
        result[follow_id]['–õ–æ–∫–∞—Ü–∏—è'] = util.id_to_location(str(data['follow_info']['location']))
    return result


def get_event_detail(events_id, chat_id):
    result = dict()
    for event_id in events_id:
        result[event_id] = {}
        data = util.post(
            '/event/get',
            {
                'event_id': event_id
            },
            get_auth(chat_id))
        result[event_id]['–í–∏–¥ —Å–ø–æ—Ä—Ç–∞'] = util.id_to_sport(str(data['event_info']['sport_id']))
        result[event_id]['–í—Ä–µ–º—è'] = util.timestamp_to_human(data['event_info']['timestamp'])
        result[event_id]['–õ–æ–∫–∞—Ü–∏—è'] = util.id_to_location(str(data['event_info']['location']))
        result[event_id]['–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'] = data['event_info']['participants_number_max']
        result[event_id]['–û–ø–∏—Å–∞–Ω–∏–µ'] = data['event_info']['description']
        result[event_id]['–°—Ç–∞—Ç—É—Å'] = data['event_info']['state_open']
    return result


def generate_event_buttons(bot, chat_id, events):
    for event_id in events:
        msg = str()
        for field in events[event_id]:
            msg += str(field) + ': ' + str(events[event_id][field]) + '\n'
        kb = [[InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data='join:' + str(event_id)),
               InlineKeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å', callback_data='leave:' + str(event_id)),
               InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='delete:' + str(event_id))],
              [InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='show:' + str(event_id)),
               InlineKeyboardButton('–ì–¥–µ?', callback_data='map:' + str(event_id))]]
        bot.send_message(chat_id=chat_id, text=msg, reply_markup=InlineKeyboardMarkup(kb))


def generate_follow_buttons(bot, update, follows):
    for follow_id in follows:
        msg = str()
        for field in follows[follow_id]:
            msg += str(field) + ': ' + str(follows[follow_id][field]) + '\n'
        kb = [[InlineKeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='unsubscribe:' + str(follow_id))]]
        update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(kb))


def show_event_participants(bot, update):
    query = update.callback_query
    data = query.data[len('show:'):]

    bot.edit_message_text(text="–ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è...",
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id)
    try:
        result = util.post(
            '/event/get',
            {
                'event_id': int(data)
            },
            get_auth(query.message.chat_id)
        )
        s_part = str()
        for participant in result['participants']:
            s_part = s_part + "‚òëÔ∏è " + participant + "\n"
        bot.send_message(chat_id=query.message.chat_id,
                         text=s_part)
    except Exception as e:
        bot.send_message(chat_id=query.message.chat_id,
                         text=str(e))


def join_to_event(bot, update):
    query = update.callback_query
    data = query.data[len('join:'):]

    bot.edit_message_text(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ —Å–æ–±—ã—Ç–∏—é...",
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id)
    try:
        util.post(
            '/event/join',
            {
                'event_id': int(data)
            },
            get_auth(query.message.chat_id)
        )
        bot.send_message(chat_id=query.message.chat_id,
                         text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
    except Exception as e:
        bot.send_message(chat_id=query.message.chat_id,
                         text=str(e))


def leave_from_event(bot, update):
    query = update.callback_query
    data = query.data[len('leave:'):]

    bot.edit_message_text(text="–ü–æ–∫–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ...",
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id)
    try:
        util.post(
            '/event/leave',
            {
                'event_id': int(data)
            },
            get_auth(query.message.chat_id)
        )
        bot.send_message(chat_id=query.message.chat_id,
                         text='–°–æ–±—ã—Ç–∏–µ –ø–æ–∫–∏–Ω—É—Ç–æ')
    except Exception as e:
        bot.send_message(chat_id=query.message.chat_id,
                         text=str(e))


def show_location_event(bot, update):
    query = update.callback_query
    data = query.data[len('map:'):]

    bot.edit_message_text(text="–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç—É—Ç:",
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id)
    try:
        ans = util.post(
            '/event/get',
            {
                'event_id': int(data)
            },
            get_auth(query.message.chat_id)
        )
        location_id = ans['event_info']['location']
        ans = util.post(
            '/location/list',
            {},
            get_auth(query.message.chat_id)
        )
        ans = ans[str(location_id)]
        bot.send_location(chat_id=query.message.chat_id,
                          longitude=ans['longitude'], latitude=ans['latitude'])
    except Exception as e:
        bot.send_message(chat_id=query.message.chat_id,
                         text=str(e))


def delete_event(bot, update):
    query = update.callback_query
    data = query.data[len('delete:'):]

    bot.edit_message_text(text="–£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ...",
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id)
    try:
        util.post(
            '/event/close',
            {
                'event_id': int(data),
                'event_status': 'Canceled',
                'results': {}
            },
            get_auth(query.message.chat_id)
        )
        bot.send_message(chat_id=query.message.chat_id,
                         text='–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ')
    except Exception as e:
        bot.send_message(chat_id=query.message.chat_id,
                         text=str(e))


def unsubscribe(bot, update):
    query = update.callback_query
    data = query.data[len('unsubscribe:'):]

    bot.edit_message_text(text="–û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è...",
                          chat_id=query.message.chat_id,
                          message_id=query.message.message_id)
    try:
        util.post(
            '/follow/remove',
            {
                'follow_id': int(data)
            },
            get_auth(query.message.chat_id)
        )
        bot.send_message(chat_id=query.message.chat_id,
                         text='–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
    except Exception as e:
        bot.send_message(chat_id=query.message.chat_id,
                         text=str(e))


def send_notifications(bot, chat_ids, event_ids):
    print(chat_ids, event_ids)
    for chat_id in chat_ids:
        generate_event_buttons(bot, chat_id, get_event_detail(event_ids, chat_id))

